/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as AuthSpeakerImport } from './routes/_auth.speaker'
import { Route as AuthOrganizerImport } from './routes/_auth.organizer'
import { Route as AuthSpeakerDashboardImport } from './routes/_auth.speaker.dashboard'
import { Route as AuthOrganizerDashboardImport } from './routes/_auth.organizer.dashboard'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthSpeakerRoute = AuthSpeakerImport.update({
  id: '/_auth/speaker',
  path: '/speaker',
  getParentRoute: () => rootRoute,
} as any)

const AuthOrganizerRoute = AuthOrganizerImport.update({
  id: '/_auth/organizer',
  path: '/organizer',
  getParentRoute: () => rootRoute,
} as any)

const AuthSpeakerDashboardRoute = AuthSpeakerDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthSpeakerRoute,
} as any)

const AuthOrganizerDashboardRoute = AuthOrganizerDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthOrganizerRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_auth/organizer': {
      id: '/_auth/organizer'
      path: '/organizer'
      fullPath: '/organizer'
      preLoaderRoute: typeof AuthOrganizerImport
      parentRoute: typeof rootRoute
    }
    '/_auth/speaker': {
      id: '/_auth/speaker'
      path: '/speaker'
      fullPath: '/speaker'
      preLoaderRoute: typeof AuthSpeakerImport
      parentRoute: typeof rootRoute
    }
    '/_auth/organizer/dashboard': {
      id: '/_auth/organizer/dashboard'
      path: '/dashboard'
      fullPath: '/organizer/dashboard'
      preLoaderRoute: typeof AuthOrganizerDashboardImport
      parentRoute: typeof AuthOrganizerImport
    }
    '/_auth/speaker/dashboard': {
      id: '/_auth/speaker/dashboard'
      path: '/dashboard'
      fullPath: '/speaker/dashboard'
      preLoaderRoute: typeof AuthSpeakerDashboardImport
      parentRoute: typeof AuthSpeakerImport
    }
  }
}

// Create and export the route tree

interface AuthOrganizerRouteChildren {
  AuthOrganizerDashboardRoute: typeof AuthOrganizerDashboardRoute
}

const AuthOrganizerRouteChildren: AuthOrganizerRouteChildren = {
  AuthOrganizerDashboardRoute: AuthOrganizerDashboardRoute,
}

const AuthOrganizerRouteWithChildren = AuthOrganizerRoute._addFileChildren(
  AuthOrganizerRouteChildren,
)

interface AuthSpeakerRouteChildren {
  AuthSpeakerDashboardRoute: typeof AuthSpeakerDashboardRoute
}

const AuthSpeakerRouteChildren: AuthSpeakerRouteChildren = {
  AuthSpeakerDashboardRoute: AuthSpeakerDashboardRoute,
}

const AuthSpeakerRouteWithChildren = AuthSpeakerRoute._addFileChildren(
  AuthSpeakerRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/organizer': typeof AuthOrganizerRouteWithChildren
  '/speaker': typeof AuthSpeakerRouteWithChildren
  '/organizer/dashboard': typeof AuthOrganizerDashboardRoute
  '/speaker/dashboard': typeof AuthSpeakerDashboardRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/organizer': typeof AuthOrganizerRouteWithChildren
  '/speaker': typeof AuthSpeakerRouteWithChildren
  '/organizer/dashboard': typeof AuthOrganizerDashboardRoute
  '/speaker/dashboard': typeof AuthSpeakerDashboardRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_auth/organizer': typeof AuthOrganizerRouteWithChildren
  '/_auth/speaker': typeof AuthSpeakerRouteWithChildren
  '/_auth/organizer/dashboard': typeof AuthOrganizerDashboardRoute
  '/_auth/speaker/dashboard': typeof AuthSpeakerDashboardRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/organizer'
    | '/speaker'
    | '/organizer/dashboard'
    | '/speaker/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/organizer'
    | '/speaker'
    | '/organizer/dashboard'
    | '/speaker/dashboard'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/register'
    | '/_auth/organizer'
    | '/_auth/speaker'
    | '/_auth/organizer/dashboard'
    | '/_auth/speaker/dashboard'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  AuthOrganizerRoute: typeof AuthOrganizerRouteWithChildren
  AuthSpeakerRoute: typeof AuthSpeakerRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  AuthOrganizerRoute: AuthOrganizerRouteWithChildren,
  AuthSpeakerRoute: AuthSpeakerRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/register",
        "/_auth/organizer",
        "/_auth/speaker"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_auth/organizer": {
      "filePath": "_auth.organizer.tsx",
      "children": [
        "/_auth/organizer/dashboard"
      ]
    },
    "/_auth/speaker": {
      "filePath": "_auth.speaker.tsx",
      "children": [
        "/_auth/speaker/dashboard"
      ]
    },
    "/_auth/organizer/dashboard": {
      "filePath": "_auth.organizer.dashboard.tsx",
      "parent": "/_auth/organizer"
    },
    "/_auth/speaker/dashboard": {
      "filePath": "_auth.speaker.dashboard.tsx",
      "parent": "/_auth/speaker"
    }
  }
}
ROUTE_MANIFEST_END */
